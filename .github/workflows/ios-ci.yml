name: iOS Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Install Dependencies
      run: |
        # Install SwiftLint if not cached
        if ! which swiftlint > /dev/null; then
          brew install swiftlint
        fi
        echo "SwiftLint version: $(swiftlint version)"
    
    - name: Run SwiftLint
      run: |
        swiftlint --config .swiftlint.yml --reporter github-actions-logging
    
    - name: Build for iOS Simulator
      run: |
        set -o pipefail
        xcodebuild -scheme LensDataBase \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -configuration Debug \
          clean build \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty
    
    - name: Run Unit Tests
      run: |
        set -o pipefail
        xcodebuild -scheme LensDataBase \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -configuration Debug \
          test \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -enableCodeCoverage YES \
          | xcpretty
    
    - name: Generate Code Coverage Report
      run: |
        xcrun xccov view --report \
          ~/Library/Developer/Xcode/DerivedData/*/Build/ProfileData/*/Coverage.profdata \
          --json > coverage.json
        echo "Code coverage report generated"
    
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: coverage.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Archive build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          build/
          *.ipa
          coverage.json
        retention-days: 30
    
    - name: Generate test report
      if: always()
      run: |
        echo "Test execution completed"
        if [ -f "coverage.json" ]; then
          echo "Coverage report available"
        fi