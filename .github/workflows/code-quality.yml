name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
    
    - name: Cache Homebrew
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Caches/Homebrew
          /usr/local/Homebrew
        key: ${{ runner.os }}-homebrew-${{ hashFiles('**/Brewfile') }}
        restore-keys: |
          ${{ runner.os }}-homebrew-
    
    - name: Install Code Quality Tools
      run: |
        brew install swiftlint
        # Install SwiftFormat if needed
        if ! which swiftformat > /dev/null; then
          brew install swiftformat
        fi
    
    - name: Run SwiftLint
      run: |
        swiftlint --config .swiftlint.yml --reporter github-actions-logging
    
    - name: Check Code Formatting
      run: |
        if which swiftformat > /dev/null; then
          swiftformat --config .swiftformat --lint . || echo "SwiftFormat check completed"
        else
          echo "SwiftFormat not available, skipping formatting check"
        fi
    
    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        TODO_COUNT=$(find . -name "*.swift" -exec grep -l "TODO\|FIXME" {} \; | wc -l)
        if [ $TODO_COUNT -gt 0 ]; then
          echo "Found $TODO_COUNT files with TODO/FIXME comments:"
          find . -name "*.swift" -exec grep -H "TODO\|FIXME" {} \;
        else
          echo "No TODO/FIXME comments found"
        fi
    
    - name: Analyze Code Complexity
      run: |
        echo "Analyzing code complexity..."
        # Run SwiftLint with complexity-focused rules
        swiftlint --config .swiftlint.yml --reporter json > swiftlint_report.json || true
        
        # Check if report was generated
        if [ -f "swiftlint_report.json" ]; then
          echo "SwiftLint analysis completed"
        fi
    
    - name: Security Scan
      run: |
        echo "Running security analysis..."
        # Check for potential security issues
        echo "Checking for hardcoded secrets..."
        find . -name "*.swift" -exec grep -l "password\|secret\|key\|token" {} \; || echo "No obvious secrets found"
        
        echo "Checking for force unwrapping..."
        FORCE_UNWRAP_COUNT=$(find . -name "*.swift" -exec grep -c "!" {} \; | awk '{sum += $1} END {print sum}')
        echo "Force unwrapping instances: $FORCE_UNWRAP_COUNT"
    
    - name: Generate Documentation
      run: |
        echo "Checking documentation coverage..."
        # Count documented vs undocumented public APIs
        PUBLIC_FUNCS=$(find . -name "*.swift" -exec grep -c "public func\|public var\|public class\|public struct" {} \; | awk '{sum += $1} END {print sum}')
        DOCUMENTED_FUNCS=$(find . -name "*.swift" -exec grep -B1 "public func\|public var\|public class\|public struct" {} \; | grep -c "///" || true)
        
        echo "Public APIs: $PUBLIC_FUNCS"
        echo "Documented APIs: $DOCUMENTED_FUNCS"
        
        if [ $PUBLIC_FUNCS -gt 0 ]; then
          DOC_COVERAGE=$(echo "scale=2; $DOCUMENTED_FUNCS * 100 / $PUBLIC_FUNCS" | bc -l)
          echo "Documentation coverage: $DOC_COVERAGE%"
        fi
    
    - name: Upload Analysis Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports
        path: |
          swiftlint_report.json
        retention-days: 30
    
    - name: Summary
      if: always()
      run: |
        echo "Code quality check completed"
        echo "Review the artifacts for detailed analysis reports"